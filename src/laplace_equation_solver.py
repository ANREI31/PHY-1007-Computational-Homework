import numpy as np
from copy import deepcopy
import random
import time


from src.fields import ScalarField


class LaplaceEquationSolver:
    """
    A Laplace equation solver used to compute the resultant potential field P in 2D-space generated by a constant
    voltage field V (for example due to wires).
    """

    def __init__(self, nb_iterations: int = 10000):
        """
        Laplace solver constructor. Used to define the number of iterations for the relaxation method.

        Parameters
        ----------
        nb_iterations : int
            Number of iterations performed to obtain the potential by the relaxation method (default = 1000).
        """
        self.nb_iterations = nb_iterations

    def solve(self, constant_voltage: ScalarField) -> ScalarField:
        """
        Solve the Laplace equation to compute the potential field given a constant voltage field.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (x, y) → V(x, y), where V(x, y) is the wires' voltage at a given point (x, y)
            in space.

        Returns
        -------
        potential : ScalarField
            A scalar field P : ℝ² → ℝ ; (x, y) → P(x, y), where P(x, y) is the electric potential at a given point
            (x, y) in space. The difference between P and V is that P gives the potential in the whole world, i.e in
            the wires and in the empty space between the wires, while the field V always gives V(x, y) = 0 if (x, y)
            is not a point belonging to an electric wire.
        """

        ### Cette implémentation ne passe pas les tests, mais elle semble être la bonne. ####
        # Elle passe les tests si on augmente le nombre d'itérations à 10 000 #

        n, m = constant_voltage.shape
        potential = deepcopy(constant_voltage)

        for _ in range(self.nb_iterations):
            next_potential_ = np.zeros((n, m))

            next_potential_[1:, :] += potential[:-1, :]
            next_potential_[:-1, :] += potential[1:, :]
            next_potential_[:, 1:] += potential[:, :-1]
            next_potential_[:, :-1] += potential[:, 1:]
            next_potential_ /= 4

            next_potential_ = np.where(constant_voltage == 0, next_potential_, constant_voltage)

            potential = next_potential_

        return ScalarField(potential)


